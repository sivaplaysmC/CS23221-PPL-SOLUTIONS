resource url?
QUESTION ----------------
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.There is only one repeated number in nums, return this repeated number. Solve the problem using set.Example 1:Input: nums = [1,3,4,2,2]Output: 2Example 2:Input: nums = [3,1,3,4,2]Output: 3
------------------ANSWER
nums = list(map(int, input().split(" ")))
unique = set(nums)
for i in unique:
    nums.remove(i)

print(*nums)
------------------------------
QUESTION ----------------
There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.Example 1:Input: text = "hello world", brokenLetters = "ad"Output: 1Explanation: We cannot type "world" because the 'd' key is broken.
------------------ANSWER
words = input().strip().lower().split(" ")
rong = set(input().strip())

a = (i for i in words if set(i).intersection(rong) == set() )
print(len(list(a)))
------------------------------
QUESTION ----------------
The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.For example, "ACGAATTCCG" is a DNA sequence.When studying DNA, it is useful to identify repeated sequences within the DNA.Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order. Example 1:Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]
Example 2:Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]
------------------ANSWER
from collections import Counter

string = input()

def Solve(string : str) -> None:
    windows  = [string[i: i + 10] for i in range(0,len(string) - 10)]
    counter = Counter(windows)
    for i in counter:
        if counter[i] > 1:
            print(i)
            
Solve(string)
------------------------------
QUESTION ----------------
Write a program to eliminate the common elements in the given 2 arrays and print only the non-repeatingelements and the total number of such non-repeating elements.Input Format:The first line contains space-separated values, denoting the size of the two arrays in integer format respectively.The next two lines contain the space-separated integer arrays to be compared.Sample Input:5 41 2 8 6 52 6 8 10Sample Output:1 5 103Sample  Input: 5 51 2 3 4 51 2 3 4 5Sample Output:NO SUCH ELEMENTS
------------------ANSWER
n1, n2 = map(int, input().split())
s1 = set(map(int, input().split()))
s2 = set(map(int, input().split()))

diff = s2.symmetric_difference(s1)
if diff: 
    print(*diff)
    print(len(diff))
else:    print("NO SUCH ELEMENTS")
------------------------------
QUESTION ----------------
Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.In the American keyboard:the first row consists of the characters "qwertyuiop",the second row consists of the characters "asdfghjkl", andthe third row consists of the characters "zxcvbnm". Example 1:Input: words = ["Hello","Alaska","Dad","Peace"]
Output: ["Alaska","Dad"]
Example 2:Input: words = ["omk"]
Output: []
Example 3:Input: words = ["adsdf","sfd"]
Output: ["adsdf","sfd"]
------------------ANSWER
rows = [
    set("qwertyuiop"),
    set("asdfghjkl;"),
    set("zxcvbnm,.")
]

numWords = int(input())
hit = False
for _ in range(numWords):
    word = input().strip()
    lower = set(word.lower())
    inFirstRow  = rows[0].issuperset(lower)
    inSecondRow = rows[1].issuperset(lower)
    inThirdRow  = rows[2].issuperset(lower)
    inRow = (rows[i].issuperset(lower) for i in range(3))
    if len([i for i in inRow if i]) == 1:
        print(word)
        hit = True
        
if not hit:
    print("No words")
------------------------------
